(define (filtered-accumulate combiner null-value filter? term a next b)
  (cond ((> a b) null-value)
	((filter? a)
	 (combiner (term a)
		   (filtered-accumulate combiner null-value filter? term (next a) next b)))
	(else (filtered-accumulate combiner null-value filter? term (next a) next b))))

(define (filtered-accumulate-iter combiner null-value filter? term a next b)
  (define (iter a result)
    (cond ((> a b) result)
	  ((filter? a)
	   (iter (next a) (combiner result (term a))))
	  (else (iter (next a) result))))
  (iter a null-value))
